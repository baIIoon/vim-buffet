*duffet.txt*                                              development + buffet
            ____                                    ?~~bL
            z@~ b                                    |  `U,
            ]@[  |                                   ]'  z@'
            d@~' `|, .__     _----L___----, __, .  _t'   `@j
            `@L_,   "-~ `--"~-a,           `C.  ~""O_    ._`@
            q@~'   ]P       ]@[            `Y=,   `H+z_  `a@
            `@L  _z@        d@               Ya     `-@b,_a'
                `-@d@a'       )@[               `VL      `a@@'
                aa~'   ],  .a@'                qqL  ), ./~
                @@_  _z~  _d@[                 .V@  .L_d'
                "~@@@'  ]@@@'        __      )@n@bza@-"
                    `-@zzz@@@L        )@@z     ]@@=%-"
                        "~~@@@@@bz_    _a@@@@z___a@K
                        "~~-@@@@@@@@@@@@@@@@@@~"   jrd
                            `~~~-@~~-@@~~~~~'
==============================================================================
CONTENTS                                                     *duffet-contents*

    Style guide .....................|duffet-style-guide|
        Dictionary ..................|duffet-dictionary|
        Function ....................|duffet-function|
    Basic knowledge .................|duffet-basic-knowledge|
      - Tabline components .........|duffet-tabline-components|
    The logic .......................|duffet-the-logic|
      - buffet#update().............|duffet-buffet-update|
    UI ..............................|duffet-ui|
    Dev status ......................|duffet-dev-status|
      - Performance .................|duffet-performance|
      - Future features .............|duffet-future-features|
==============================================================================
Style guide                                               *duffet-style-guide*

Why though ?
- Only god knows what will be added in an empty Dictionary. 
- Brief explaination for a function will save a lot of time of reading it.

------------------------------------------------------------------------------
Dictionary                                                 *duffet-dictionary*

        " <name> - <purpose>
        " ?<key> (<type>): <what_is_this>
        " ....

<key>: If key is taken from another varialbe use {<variable_name>}, otherwise
just write a name for it.

<what_is_this>: examples are better for this case:
    <type> is not Dict:
        " *The template above  

    <type> is Dict:
        " $head (List)-str: buffer's directory abspath, split by
        "   `s:path_separator`
        " $not_new (Number): it's not new if len(@tail) > 0; 
        "   not [No Name] file ?
        " $tail (String): buffer's filename

------------------------------------------------------------------------------
Function                                                     *duffet-function*
        


==============================================================================
1. Basic knowledge                                    *duffet-basic-knowledge*
------------------------------------------------------------------------------
1.1 Tabline components                             *duffet-tabline-components*


==============================================================================
2. The logic                                                *duffet-the-logic*
------------------------------------------------------------------------------
2.1 buffer#update()                                     *duffet-buffet-update*

==============================================================================
3. UI                                                              *duffet-ui*

==============================================================================
Dev status                                                 *duffet-dev-status*

[ ] Clean plugin/buffet.vim

------------------------------------------------------------------------------
Performance                                               *duffet-performance*

[ ] Decrease source time: (Critical)~

- "But caw.vim does not slow down your Vim startup because each comment string 
are defined at ftplugin files (after/ftplugin/<filetype>/caw.vim)." --tyru/caw.vim

- Using `map()` https://www.reddit.com/r/vim/comments/5y8c1w/
any_recommand_viml_coding_style_guide/

- Benchmark: 
	g> benchmark vim plugin
	https://stackoverflow.com/questions/21194354/how-can-i-reduce-startup-time-for-vim
	Make more autoload file (because it will reduce source time)
	- buffet/ui.vim + logic.vim //core
	- buffet/.... Key mapping, etc
	- buffet.vim

[ ] Asynchronous:~
		- Render current tab while other tab(s) loading and showing ...
		- Asynchronous for identical name processing

[ ] Using other languages:~
    	Is this inconvention for the users who just want to 
		use Vimscript only ? Or we just actually don't need this.
		-> http://liuchengxu.org/posts/speed-up-vim-python-plugin-using-rust/

------------------------------------------------------------------------------
Future features                                       *duffet-future-features*

[ ] Two ends separator:~

Using https://www.nerdfonts.com/ > Font Patcher Script, to create more
separator for this feature (can i?)


[ ] Reordering:~

Take the advantage of s:buffer_ids[]


[ ] Coloring `vim-devicons`:~

Can we ?


[ ] Sorry we don't use separator here:~

Another way to show separator; instead of using separator character 
to distinguish buffers, we use odd and even highlighting

Odd is buffetbuffer, while even is declared through g: (or default)


[ ] Move to buffer below(above) of the deleted buffer (like Chrome):~

If buffer1 is deleted move to buffer2


[ ] Restore closed buffers:~

For now just save the last closed buffer, i'll find a solution like Chrome,
incorporate with s:buffer_ids[] to restore the old position.


[ ] Delete multiple buffers:~

Enter: 1,3,5 -> delete those buffer
==============================================================================
vim:tw=78:nosta:noet:ts=4:sts=0:ft=help:noet:fen:fdm=marker:
